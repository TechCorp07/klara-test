from django.contrib import admin
from django.utils.html import format_html
from .models import AuditEvent, AuditExport, PHIAccessLog, SecurityAuditLog, ComplianceReport


class AuditEventAdmin(admin.ModelAdmin):
    list_display = ('timestamp', 'event_type', 'resource_type', 'user_display', 'description_truncated', 'ip_address')
    list_filter = ('event_type', 'resource_type', 'timestamp')
    search_fields = ('description', 'resource_id', 'user__username', 'user__email', 'ip_address')
    readonly_fields = ('user', 'event_type', 'resource_type', 'resource_id', 'description', 
                       'ip_address', 'user_agent', 'timestamp')
    date_hierarchy = 'timestamp'
    
    def user_display(self, obj):
        if obj.user:
            return obj.user.username
        return 'Anonymous'
    user_display.short_description = 'User'
    
    def description_truncated(self, obj):
        if len(obj.description) > 100:
            return f"{obj.description[:100]}..."
        return obj.description
    description_truncated.short_description = 'Description'


class PHIAccessLogAdmin(admin.ModelAdmin):
    list_display = ('timestamp', 'user_display', 'patient_display', 'access_type', 'reason', 'ip_address')
    list_filter = ('access_type', 'timestamp')
    search_fields = ('reason', 'user__username', 'patient__username', 'ip_address')
    readonly_fields = ('user', 'patient', 'access_type', 'reason', 'record_type', 
                      'record_id', 'ip_address', 'user_agent', 'timestamp')
    date_hierarchy = 'timestamp'
    
    def user_display(self, obj):
        if obj.user:
            return obj.user.username
        return 'Anonymous'
    user_display.short_description = 'User'
    
    def patient_display(self, obj):
        if obj.patient:
            return obj.patient.username
        return 'Unknown'
    patient_display.short_description = 'Patient'


class SecurityAuditLogAdmin(admin.ModelAdmin):
    list_display = ('timestamp', 'event_type', 'user_display', 'description_truncated', 'severity', 'ip_address')
    list_filter = ('event_type', 'severity', 'timestamp')
    search_fields = ('description', 'user__username', 'ip_address')
    readonly_fields = ('user', 'event_type', 'description', 'severity', 
                       'ip_address', 'user_agent', 'timestamp')
    date_hierarchy = 'timestamp'
    
    def user_display(self, obj):
        if obj.user:
            return obj.user.username
        return 'Anonymous'
    user_display.short_description = 'User'
    
    def description_truncated(self, obj):
        if len(obj.description) > 100:
            return f"{obj.description[:100]}..."
        return obj.description
    description_truncated.short_description = 'Description'


class ComplianceReportAdmin(admin.ModelAdmin):
    list_display = ('report_date', 'report_type', 'generated_by_display', 'status_display')
    list_filter = ('report_type', 'status', 'report_date')
    search_fields = ('report_type', 'generated_by__username', 'notes')
    readonly_fields = ('report_date', 'report_type', 'generated_by', 'status', 
                       'file_url', 'notes', 'created_at', 'updated_at')
    date_hierarchy = 'report_date'
    
    def generated_by_display(self, obj):
        if obj.generated_by:
            return obj.generated_by.username
        return 'System'
    generated_by_display.short_description = 'Generated By'
    
    def status_display(self, obj):
        status_colors = {
            'pending': 'orange',
            'processing': 'blue',
            'completed': 'green',
            'failed': 'red',
        }
        color = status_colors.get(obj.status, 'gray')
        return format_html('<span style="color:{};">{}</span>', color, obj.get_status_display())
    status_display.short_description = 'Status'


class AuditExportAdmin(admin.ModelAdmin):
    list_display = ('created_at', 'user_display', 'status_display', 'download_link')
    list_filter = ('status', 'created_at')
    search_fields = ('user__username',)
    readonly_fields = ('user', 'status', 'file_url', 'filters', 'created_at', 'completed_at')
    date_hierarchy = 'created_at'
    
    def user_display(self, obj):
        if obj.user:
            return obj.user.username
        return 'Unknown'
    user_display.short_description = 'User'
    
    def status_display(self, obj):
        status_colors = {
            'pending': 'orange',
            'processing': 'blue',
            'completed': 'green',
            'failed': 'red',
        }
        color = status_colors.get(obj.status, 'gray')
        return format_html('<span style="color:{};">{}</span>', color, obj.get_status_display())
    status_display.short_description = 'Status'
    
    def download_link(self, obj):
        if obj.file_url and obj.status == 'completed':
            return format_html('<a href="{}" target="_blank">Download</a>', obj.file_url)
        return '-'
    download_link.short_description = 'Download'


# Register models
admin.site.register(AuditEvent, AuditEventAdmin)
admin.site.register(PHIAccessLog, PHIAccessLogAdmin)
admin.site.register(SecurityAuditLog, SecurityAuditLogAdmin)
admin.site.register(ComplianceReport, ComplianceReportAdmin)
admin.site.register(AuditExport, AuditExportAdmin)
